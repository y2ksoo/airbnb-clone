# Django Study notes2

## Library vs. Framework

- 프로그래머는 Library 불러와서 자신의 코드가 Library를 쓸 수 있음

- 프로그래머는 Framework에 코드를 작성하여 Framework가 자신의 코드를 실행할 수 있게함

## ORM(object relational mapper)

- python code를 SQL문으로 바꿔 DB에 저장함

## Models.py

- models.Model : Django에서 정의한 DB와 소통하기 위한 구조체

- models 안애는 Textfield, Emailfield 등 많은 데이터형식이 미리 정의되어 있음.

- 각 필드는 필드에 맞는 적절한 데이터 유효성 및 포멧을 정하고 있고 입력 방법을 제공함(imagefiled, datefield 등..)

- 각 필드는 default="" 값을 갖거나 null=True 로 정의하여 비워둘 수 있도록 정의해야 함

1. models 안에 정의된 필드를 앱의 models."class" 안에 정의하고

2. python manage.py makemigrations 로 migration 파일을 만들고

3. python manage.py migrate로 SQLight3 DB에 적용하면 웹페이지 표시됨

### Abstract model

- 다른 앱의 모델에서 상속받아 공통으로 사용할 모델을 정의함

- abstract model은 DB에 포함되지 않음

### Foreign Key

- 서로 다른 앱의 모델끼리 연결해줌

- many-to-one 관계 (Many rooms - One user)

- Foreign key를 사용하면 다른 앱의 모델에 있는 데이터를 가져와서 쓸 수 있음(가여오는 모델의 id 번호를 가져와서 링크함)

- 따라서, one 에 종속된 many 객체들의 데이터를 one 이 지워질때 같이 지울지(CASCADE), 보호할지(PROTECT) 등을 지정할 수 있음

```python
    room = models.ForeignKey("rooms.Room", on_delete=models.CASCADE)
```

위와 같이 접근하면 room 객체를 통해 rooms.Room의 모델내에 있는 데이터를 모두 접근하여 사용할 수 있음

- relation은 chain 처럼 엮어서 사용할 수 있음

  "app1.var -> (app2.var -> app3.var)" 이런식의 관계를 가지면 app1 이 app3의 정보까지 접근가능

- app1.var1 -> app2.var2 으로 ForeignKey를 생성하면 app2.var2 또한 app1.var1에 접근할 수 있게 됨

  -> Django의 app2.var2 모델이 python Object로 변환되면서 var1_set 형태로 DB 정보를 갖게 됨

  -> var1_set은 모델에서 ForeignKey를 사용할 때 "related_name" 으로 이름을 재정의 할 수 있다.

  --> 따라서 아래와 같이 related_name을 지정하는 것은 현재 app1.var1 이 아닌 app2.var2 에서 app1.var1의 이름을 지정하는 것이라 이애할 수 있다

  ```python
      host = models.ForeignKey(
      "users.User", related_name="rooms", on_delete=models.CASCADE
  )
  ```

### ManytoManyField

- 서로 다른 앱의 모델끼리 연결해줌 -> 데이터를 가져다 쓸 수 있음

- many-to-many 관계에 쓸수 있음 -> 다른 데이터에서 여러개의 데이터를 선택하여 적용

- manytomany 도 ForeignKey와 마찬가지로 app1.va1 -> app2.var2 으로 지정하면 역방향으로도 정보 접근이 가능

  -> var1 이름으로 바로 접근가능

## admin.py

- Django가 제공하는 기본 사용자 웹페이지

- models.py에 정의된 데이터를 표시할 수 있음

  1. models."class_name"을 등록하고

  2. admin.py 내에 "custom class"를 정의하여 어떤 방식으로 표현할 지를 코딩할 수 있음

```python
@admin.register(models.User)
class CustomUserAdmin(UserAdmin):
    pass
```

- admin.py 에 함수를 넣으면 admin에서만 쓸 수 있지만 models.py에 넣으면 모든 곳에 쓸수 있다.

### list

- 기본적으로 Django.contrib 에 정의된 항목들이 있어 사용할 수 있음(auth, user, group 등)

- list_display, list_filter 로 admin 패널 1차 페이지에 나오는 정보를 수정할 수 있음

### serch_fields

- 검색 창

```python
    search_fields = ("city", "host__username")
```

        - city 를 검색대상에 넣음

        - host는 app1에서 app2의 models를 가져온 것으로 가져온 model 내의 username을 검색 대상으로 함

### filter_horizontal

- 검색하여 원하는 항목만 선택하여 적용 수 있음

### fieldsets

- models.py 의 항목들을 그룹으로 묶어서 나타낼 수 있음
